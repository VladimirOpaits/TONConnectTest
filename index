<!DOCTYPE html>
<html>
<head>
    <script src="https://unpkg.com/@tonconnect/ui@latest/dist/tonconnect-ui.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; max-width: 800px; }
        .form-group { margin-bottom: 15px; }
        label { display: block; margin-bottom: 5px; font-weight: bold; }
        input { width: 100%; padding: 8px; font-size: 14px; box-sizing: border-box; }
        button { padding: 10px 20px; font-size: 16px; margin: 5px; }
        #result { margin-top: 20px; background: #f5f5f5; padding: 15px; border-radius: 5px; }
        #api-result { margin-top: 20px; background: #e8f5e8; padding: 15px; border-radius: 5px; }
        .error { background: #ffe6e6 !important; }
        pre { white-space: pre-wrap; word-wrap: break-word; font-size: 12px; }
        .auth-section { border: 1px solid #ddd; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
        .required { color: red; }
    </style>
</head>
<body>
    <h2>TON Wallet Connection Test</h2>
    
    <!-- –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ -->
    <div class="auth-section">
        <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API</h3>
        
        <div class="form-group">
            <label for="backend-url">URL –±—ç–∫–µ–Ω–¥–∞:</label>
            <input type="text" id="backend-url" value="https://telegramcases-production.up.railway.app/" placeholder="https://telegramcases-production.up.railway.app/">
        </div>
        
        <div class="form-group">
            <label for="authorization">Authorization <span class="required">*</span>:</label>
            <input type="password" id="authorization" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ authorization">
        </div>
        
        <div class="form-group">
            <label for="x-telegram-init-data">x-telegram-init-data <span class="required">*</span>:</label>
            <input type="text" id="x-telegram-init-data" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ x-telegram-init-data">
        </div>
        
        <div class="form-group">
            <label for="user-id">User ID:</label>
            <input type="number" id="user-id" value="0" placeholder="0">
        </div>
    </div>
    
    <!-- TON Connect -->
    <div id="ton-connect"></div>
    <button onclick="connect()">1. Connect TON Wallet</button>
    <button onclick="sendToBackend()" id="send-btn" disabled>2. Send to Backend</button>
    <button onclick="showCurlCommand()" id="curl-btn" disabled>Show cURL</button>
    
    <div id="result"></div>
    <div id="api-result"></div>
    
    <script>
        let walletData = null;
        
        const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
            manifestUrl: 'https://raw.githubusercontent.com/ton-community/tutorials/main/03-client/test/public/tonconnect-manifest.json'
        });

        async function connect() {
            try {
                const result = await tonConnectUI.connectWallet({
                    tonProof: {
                        payload: "test_payload_" + Date.now(),
                        domain: window.location.hostname || "localhost"
                    }
                });
                
                console.log('Full connection result:', result);
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω–æ –ø–æ –≤–∞—à–µ–π —Å—Ö–µ–º–µ
                walletData = {
                    wallet_address: result.account.address,
                    user_id: parseInt(document.getElementById('user-id').value) || 0,
                    network: "-239", // mainnet –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ
                    proof: {
                        timestamp: result.proof?.timestamp || Math.floor(Date.now() / 1000),
                        domain: {
                            lengthBytes: result.proof?.domain?.lengthBytes || (window.location.hostname || "localhost").length,
                            value: result.proof?.domain?.value || window.location.hostname || "localhost"
                        },
                        signature: result.proof?.signature || "test_signature_" + Math.random().toString(36).substr(2, 9),
                        payload: result.proof?.payload || "test_payload_" + Date.now(),
                        pubkey: result.proof?.pubkey || result.account.publicKey || "test_pubkey_" + Math.random().toString(36).substr(2, 9)
                    },
                    public_key: result.account.publicKey || "test_public_key_" + Math.random().toString(36).substr(2, 9)
                };
                
                document.getElementById('result').innerHTML = `
                    <h3>‚úÖ Wallet Connected!</h3>
                    <p><strong>Address:</strong> ${walletData.wallet_address}</p>
                    <p><strong>Network:</strong> ${walletData.network}</p>
                    <h4>Request Body –¥–ª—è API:</h4>
                    <pre>${JSON.stringify(walletData, null, 2)}</pre>
                `;
                
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
                document.getElementById('send-btn').disabled = false;
                document.getElementById('curl-btn').disabled = false;
                
            } catch (error) {
                console.error('Connection error:', error);
                document.getElementById('result').innerHTML = `<div class="error"><h3>‚ùå Connection Error:</h3><pre>${error.message}</pre></div>`;
            }
        }

        async function sendToBackend() {
            if (!walletData) {
                alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!');
                return;
            }

            const backendUrl = document.getElementById('backend-url').value;
            const authorization = document.getElementById('authorization').value;
            const telegramInitData = document.getElementById('x-telegram-init-data').value;
            
            if (!authorization) {
                alert('–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ authorization!');
                return;
            }
            
            if (!telegramInitData) {
                alert('–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ x-telegram-init-data!');
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º user_id –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            walletData.user_id = parseInt(document.getElementById('user-id').value) || 0;

            const headers = {
                'Content-Type': 'application/json',
                'authorization': authorization,
                'x-telegram-init-data': telegramInitData
            };

            try {
                document.getElementById('api-result').innerHTML = '<h3>‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥...</h3>';
                
                console.log('Sending request:', {
                    url: backendUrl,
                    headers: headers,
                    body: walletData
                });
                
                const response = await fetch(backendUrl, {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify(walletData)
                });
                
                const responseData = await response.json();
                
                if (response.ok) {
                    document.getElementById('api-result').innerHTML = `
                        <h3>‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</h3>
                        <p><strong>Status:</strong> ${response.status}</p>
                        <h4>–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:</h4>
                        <pre>${JSON.stringify(responseData, null, 2)}</pre>
                    `;
                } else {
                    document.getElementById('api-result').innerHTML = `
                        <div class="error">
                            <h3>‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:</h3>
                            <p><strong>Status:</strong> ${response.status}</p>
                            <pre>${JSON.stringify(responseData, null, 2)}</pre>
                        </div>
                    `;
                }
                
            } catch (error) {
                console.error('Backend request error:', error);
                document.getElementById('api-result').innerHTML = `
                    <div class="error">
                        <h3>‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:</h3>
                        <pre>${error.message}</pre>
                    </div>
                `;
            }
        }

        function showCurlCommand() {
            if (!walletData) {
                alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!');
                return;
            }
            
            const backendUrl = document.getElementById('backend-url').value;
            const authorization = document.getElementById('authorization').value;
            const telegramInitData = document.getElementById('x-telegram-init-data').value;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º user_id
            walletData.user_id = parseInt(document.getElementById('user-id').value) || 0;
            
            const curlCommand = `curl -X POST "${backendUrl}" \\
  -H "Content-Type: application/json" \\
  -H "authorization: ${authorization}" \\
  -H "x-telegram-init-data: ${telegramInitData}" \\
  -d '${JSON.stringify(walletData)}'`;
            
            document.getElementById('api-result').innerHTML = `
                <h3>üìã cURL –∫–æ–º–∞–Ω–¥–∞:</h3>
                <pre>${curlCommand}</pre>
                <button onclick="navigator.clipboard.writeText(\`${curlCommand.replace(/`/g, '\\`')}\`)">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
            `;
        }
    </script>
</body>
</html>
